import React from 'react';
import {useData} from './getStateData';
import {stack,scaleOrdinal,scalePow,format,scaleBand,max} from 'd3';
function App() {
  const data = useData();

  if(!data) {
    return <pre>Loading...</pre>;
  }

  // const d = data[10];
  // console.log(d);
  // console.log(d.Active+d.Deaths+d.Recovered+d.Delta_Confirmed+d.Delta_Deaths+d.Delta_Recovered+d.Migrated_Other);
  // console.log(d.Confirmed);

  const height = window.innerHeight;
  const width = window.innerWidth;
  const margin = {top:'20',right:'20',bottom:'150',left:'90'};
  
  const innerWidth = width - margin.left - margin.right;
  const innerHeight = height - margin.top - margin.bottom;

  const fields = ['Delta_Confirmed','Delta_Deaths','Delta_Recovered','Migrated_Other','Active','Deaths','Recovered'];
  // const stackedData = fields.map((field) => {
  //   return data.map(stateData => {
  //     return {'state':stateData.State,'value':stateData[field]}
  //   })
  // })

  const stackedData = stack()
      .keys(fields)(data)

  console.log(stackedData)

  const xDomain = data.map(d => d.State)
  const xScale = scaleBand()
    .domain(xDomain)
    .range([0,innerWidth])
    .padding(0.1)


  // console.log(xScale.domain());
  // console.log(xScale.range());
  // console.log(xScale("Bhiar"));
  // console.log(xScale("Goa"));

  // data.forEach(d => console.log(xScale(d.State)))

  const maxYDomain = max(stackedData, (d) => (
    max(d, (d2) => (
      // where y0, y is generated by d3.layout.stack()
      d2.data.Confirmed
    ))
));
// console.log(maxYDomain);
const yDomain = [0, maxYDomain];
const yScale = scalePow().exponent(0.3).range([0,innerHeight]).domain(yDomain);

const colorScale = scaleOrdinal().range(['purple','black','blue','yellow','orange','red','green']);

console.log(yScale.domain(),yScale.range(),yScale.ticks())
  
  return (
    <svg height={height} width={width}>
      <g transform={`translate(${margin.left},${margin.top})`}>
        {
            xScale.domain().map((tickValue,i) => (
              <g
                className="tick"
                key={`bottomeAxis${i}`}
                transform={`translate(${xScale(tickValue)},0)`}
                
              >
                <text 
                  style={{ textAnchor: 'middle' }} 
                  dy=".71em" y={innerHeight + 10}  
                  transform-origin="left"
                  transform={`translate(-${xScale.bandwidth()*5},200),rotate(-90)`}
                >   
                  {tickValue}    
                </text>
              </g>
            ))
        }

        {
            yScale.ticks().map((tickValue,i) => (
              <>
              {tickValue-5>0 && <g className="tick" transform={`translate(0,${yScale(tickValue-5)})`} >
                <line x2={innerWidth} />
                <text        
                  style={{ textAnchor: 'end' }}
                  x={-3}
                  dy=".32em"
                >       
                  {tickValue}
                </text>
              </g>}
              <g className="tick" transform={`translate(0,${yScale(tickValue)})` }>
                <line x2={innerWidth} />
                <text        
                  style={{ textAnchor: 'end' }}
                  x={-3}
                  dy=".32em"
                >       
                  {format(tickValue)}
                </text>
              </g>
              </>
            ))

        }

        {stackedData.map((field,i) => {
          return (field.map((data,j) => {
            // console.log(data.data[fields[i]])
            // console.log((data.data.State),xScale(`${xAccessor(data.data)}`))
            // console.log(data[0],yScale(data[0]))
            return (
              <rect
                y={yScale(data[0])}
                x={xScale(data.data.State)}
                width = {xScale.bandwidth()}
                height={yScale(data[1]-data[0])}
                fill={colorScale(i)}
               
              />
            )
          }))
        })}
      </g>
    </svg>
  );
}

export default App;
